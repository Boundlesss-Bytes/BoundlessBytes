Python 3.12.3 (tags/v3.12.3:f6650f9, Apr  9 2024, 14:05:25) [MSC v.1938 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import tkinter as tk
>>> from tkinter import ttk
>>>
>>> class Job:
...     def _init_(self, title, description, skills):
...         self.title = title
...         self.description = description
...         self.skills = skills
...
...     def match_skills(self, user_skills):
...         return all(any(word in skill for skill in self.skills) for word in user_skills)
...
>>> class User:
...     def _init_(self, name, skills):
...         self.name = name
...         self.skills = skills
...
>>> class JobRecommendationApp:
...     def _init_(self, root):
...         self.root = root
...         self.root.title("Job Recommendation System")
...
...         self.job_list = [
...             Job("Software Developer", "Develop software applications using various programming languages.",
...                 ["programming", "problem solving", "software development"]),
...             Job("Data Analyst", "Analyze data to extract valuable insights using statistical methods.",
...                 ["data analysis", "statistics", "SQL"]),
...             Job("Graphic Designer", "Create visually appealing graphics and designs using design software.",
...                 ["graphic design", "Adobe Photoshop", "illustration"]),
...             Job("Marketing Manager", "Plan and execute marketing strategies to promote products or services.",
...                 ["marketing", "digital marketing", "social media"]),
...             # Add more job titles, descriptions, and skills as needed
...         ]
...
...         self.user_label = ttk.Label(root, text="Enter your skills:")
...         self.user_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")
...
...         self.user_skills_entry = ttk.Entry(root, width=50)
...         self.user_skills_entry.grid(row=0, column=1, padx=10, pady=10)
...
...         self.recommend_button = ttk.Button(root, text="Get Recommendations", command=self.get_recommendations)
...         self.recommend_button.grid(row=0, column=2, padx=10, pady=10)
...
...         self.recommendations_label = ttk.Label(root, text="Job Recommendations:")
...         self.recommendations_label.grid(row=1, column=0, padx=10, pady=10, sticky="w")
...
...         self.recommendations_text = tk.Text(root, height=10, width=50)
...         self.recommendations_text.grid(row=1, column=1, columnspan=2, padx=10, pady=10)
...
...     def get_recommendations(self):
...         user_skills = self.user_skills_entry.get().lower().split(',')
...         user_skills = [skill.strip() for skill in user_skills]
...
...         recommendations = []
...         for job in self.job_list:
...             if job.match_skills(user_skills):
...                 recommendations.append(job.title)
...
...         if recommendations:
...             self.recommendations_text.delete(1.0, tk.END)
...             for job_title in recommendations:
...                 self.recommendations_text.insert(tk.END, f"- {job_title}\n")
...         else:
...             self.recommendations_text.delete(1.0, tk.END)
...             self.recommendations_text.insert(tk.END, "No jobs found matching your skills.")
...
>>> if _name_ == "_main_":
...     root = tk.Tk()
...     app = JobRecommendationApp(root)
...     root.mainloop()
